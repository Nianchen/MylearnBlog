(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{341:function(s,t,a){"use strict";a.r(t);var n=a(13),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1正则表达式\n\n1.1横向模糊匹配 横向拓展 比如 /ab{2，5}c/g 这里面的b有2~5个 虽然数量发生了改变但是都是b一个字母 就是横向增长了 但是没有纵向增长\n\n1.2，纵向模糊匹配· 出现在一个位置的元素可以匹配多个字母 不如 /a[123]b/g 中间的位置就可以是 1 2 或者 3\n")])])]),t("div",{staticClass:"language-typescript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("字符组\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.1")]),s._v("范围表示\n虽然叫做字符组 但是说的是这一个字符点上可以出现的字符集合\n所以就出现了这种范围的写法\neg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 代表所有小写字符 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("所有数字\n但是如果只用匹配几个字符要注意不能让他直接转义成范围写法\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.2")]),s._v("排除字符串\n也就是这个位置除了这几个东西都能出现 也就是范围取反 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("abc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("除了abc都行\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),s._v("简写模式\n\\d就是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("。表示是一位数字。记忆方式：其英文是digit（数字）。\n\\"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("D")]),s._v("就是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("。表示除数字外的任意字符。\n\\w就是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("9a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("zA"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。\n\\"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("W")]),s._v("是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("9a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("zA"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("。非单词字符。\n\\s是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" \\t\\v\\n\\r\\f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。\n\\"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),s._v("是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" \\t\\v\\n\\r\\f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("。 非空白符。\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("就是"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\\n\\r\\u2028\\u2029"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("中的每个点，都可以理解成占位符，表示任何类似的东西。\n\n")])])]),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("量词\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.1")]),s._v("了范围也就可以重复出现 比如"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("出现的范围就是m"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v("n次数 m"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" 表示至少出现m次。\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" 等价于"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("，表示出现m次。\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" 等价于"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("，表示出现或者不出现。记忆方式：问号的意思表示，有吗？\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" 等价于"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" 等价于"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.2")]),s._v(" 贪婪匹配和惰性匹配\n贪婪匹配就是一定要完成你给的正则表达式最好的返回结果 比如 \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" regex"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d{2,5}")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" string "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123 1234 12345 123456"')]),s._v("\nstring"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n得到的结果是 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1234")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12345")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12345")]),s._v(" 就是数字可以出现两到五次 但是既然能满足就一直往下走直到停了\n\n相反惰性匹配就是尽量进行少次数的对比\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d{2,5}？")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" string "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123 1234 12345 123456"')]),s._v("\nstring"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n得到的结果是 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),s._v(" 他每次只会进行最小次数的对比\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//{m,n}?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//{m,}?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//??")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//+?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//*?")]),s._v("\n\n")])])]),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("多选分支\n一个正则匹配中可以实现多个模式 只需满足其中一个模式就可以 而且这个模式匹配也存在惰性如果前面的成功匹配了后面的东西就不会接着进行匹配\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("good|nice")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" string "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"good idea, nice try."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// => ["good", "nice"]')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("goodbye|good")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" string "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"goodbye"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// => ["goodbye"]')]),s._v("\n \n")])])]),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v("简单案例\n匹配"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("进制颜色\neg： #ffbbad #"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FFF")]),s._v(" #ffE\n分析都是以#开头\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("#([0-9a-fA-F]{6})")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),s._v("\n匹配"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("小时时间\neg： "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("06")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("([0-1][0-9]|[2][0-3]):[0-5][0-9]$")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])])]),t("p",[s._v("正则表达式位置匹配攻略")])])}),[],!1,null,null,null);t.default=e.exports}}]);